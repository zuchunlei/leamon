现象：不同的选择周期中，SelectionKey的附件将丢失？
原来是fastdebug版本的JDK使该功能的缺失，完全没有SelectionKey附件丢失的情况发送。（后经证实，完全不是该因素引起）。

###########################################################################################################################################################
特别注意：Channel.register(selector, OP*)注册方式兴趣关注与SelectionKey.interestOps(OP*)的不同？

如果该Channel是由ServerSocketChannel.accept()返回的，还没有与Selector有注册关系，则必须才用Channel.register()方式来注册。
如果Channel与Selector已经存在注册关系，如果想改变其关注的兴趣事件，应采用SelectionKey.interestOps()方式来注册。
两者的异同：
Channel.register()方式会使原来的SelectionKey的附件丢失，而SelectionKey.interestOps()方式则不会。

所以：如果Channel已经与Selector存在注册关系SelectionKey，则该Channel的所有改变关注兴趣的操作都应该使用SelectionKey.interestOps()方式来处理！！
------------------------------------------------------------------------------------------------------------------------------------------------------------

如果如果Channel与Selector已经存在注册关系，仍然采用Channel.register(selector, OP*)方式注册兴趣关注，则会产生两个重要问题：

1、如果描述Channel与Selector注册关系的SelectionKey对象存在附件，调用Channel.register(selector, OP*)后，附件对象会丢失。
2、如果注册操作的selector处于select()阻塞状态时，则Channel.register(selector, OP*)会阻塞（因竞争锁），注册无法成功。

###########################################################################################################################################################

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
现象：Reactor模式下的OP_ACCEPT就绪事件没有被Poller消费掉之前，Acceptor在一下选择周期中，仍然存在该SelectionKey？
OP_ACCEPT就绪事件应该由Acceptor来消费，accept()返回的SocketChannel交与Poller来处理。（通用解决方案）

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
现象：应用IO读写与网络传输不一致，数据不完整。（java对象序列化不完全，无法反序列化成为java对象）？
先采用自定义消息边界的方案来解决数据不完整的问题，该方案要求数据发送方与接收方按照同样的格式来对数据发送与接收。

网络自定义协议的常用手段为数据成帧，而数据成帧的常用方式为以下两种：
1、基于界定符，消息的结束有一组唯一的标记标识，这个特殊的标识不能出现在发送的数据中。
2、显式长度，在变长的发送数据中，显式在数据头部写入该数据的长度。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
现象：不正确的OP_WRITE注册时机，导致CPU运行100%？（NIO中OP_WRITE的正确注册方式）
对于SocketChannel.write(ByteBuffer)的调用，可以在未将SocketChannel注册到Selector关注OP_WRITE之前调用，如果一次write操作并未将Buffer中的数据
全部写入，则可以按次数循环写入。
如果本地SocketChannel中的SEND_Q已满，则write操作返回0，规定写入次数退化到0后，可将该SocketChannel更改为兴趣写。
SelectionKey.interestOps(SelectionKey.interestOps |SelectionKey.OP_WRITE)，在Selector的下次选择周期中进行写入操作。
【SocketChannel的何时可写：本地SEND_Q中有空间，则OP_WRITE立即就绪。本地SEND_Q中已满，则该SocketChannel不可写。】
如果将ByteBuffer中的数据（应用层）完全写入SEND_Q（内核层）中，则应该立即调用SelectionKey.interestOps(SelectionKey.interestOps & ~SelectionKey.OP_WRITE)
取消对SocketChannel的兴趣写。否则，因为本地SEND_Q未满，导致Selector.select()立即返回，CPU运行100%。

结论-在客户的一次请求周期中，将响应数据write到客户端。如果在规定的次数下，ByteBuffer中仍然存在未发送完全的数据（可能SEND_Q已满），则SocketChannel注册兴趣写，
	在一个选择周期中进行write。如果应用层数据完全写入到了SEND_Q中，则应该立即取消兴趣写。

【SelectionKey.interestOps(SelectionKey.interestOps | SelectionKey.OP_WRITE) 注册兴趣写】
【SelectionKey.interestOps(SelectionKey.interestOps & ~SelectionKey.OP_WRITE) 取消兴趣写】
