网络世界中，进程标识的三元组 。（网络IP地址，协议类型，端口号）
调用Socket创建一个套接字时，返回的socket描述符，它存在与协议族空间中，没有一个具体的地址。bind()显示绑定，listen(),connect()隐式绑定 。
--------------------------------------------------------------------------------------------------------------------
SelectionKey:
SelectionKey对象维护了一个可被选择的通道Channel与IO复用器Selector之间的注册关系。
在整个Selector的选择周期中，一个Channel与Selector的注册关系由唯一一个SelectionKey对象所维护。
不管该Channel调用了多少次注册方法，返回都都是同一个SelectionKey对象，Channel调用注册方法只是更新该SelectionKey的interOpt的状态值。
SelectionKey的cancel方法，解除关联Channel到Selector的注册关系。但是该Channel没有关闭，也不影响Channel的读写状态，只是该Channel状态的改变不再受Selector感知。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Channel
Channel调用了close方法，表示该通道已经关闭。维护该Channel与Selector注册关系的SelectionKey对象在Selector下次选择Selection时自动移除。
非阻塞IO，Channel的读写不再阻塞，而是返回0。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Selector
Selector.selectKeys()返回的是就绪键集。在迭代就绪键集时，应显示调用Set.remove()方法，否则Selector不会自己从已选择的就绪键集中移除SelectionKey对象。
在处理完Channel就绪事件以后，必须显示的将Channel相关的SelectionKey从就绪键集中删除，否则在Selector下一个选择周期中，该SelectionKey依然存在与就绪键集中。
如果SelectionKey中的就绪事件没有被处理，则Selector下次的选择时立即返回，如果Selector.selectedKeys()返回的就绪键集不显式remove()，则select()调用立即返回，且返回值为0。


SelectionKey  就绪事件
Channel  读就绪  （SelectionKey.OP_READ） 写就绪（SelectionKey.OP_WRITE） 接受就绪（SelectionKey.OP_CONNECT） 连接就绪（SelectionKey.OP_ACCEPT）

如果SelectionKey中的就绪事件没有被Channel消费掉，则Selector的选择操作立即返回。selector依然认为某一通道有事件到达。

######################################################################################
如果SelectionKey中的就绪事件没有被Channel消费掉，则在Selector的下次选择操作中仍然会返回，#
在进行Selector下一选择操作之前，将该SelectionKey就绪的事件取消掉，则可避免该事件继续触发   #
######################################################################################

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
IO多路复用（select，poll，epoll）的水平触发（Level Triggered）与边缘触发（Edge Triggered）：

select()和poll()将就绪的文件描述符告诉进程后，如果进程没有对其进行IO操作，那么下次调用select()和poll()的时候将再次报告这些文件描述符，
所以它们一般不会丢失就绪的消息，这种方式称为水平触发（Level Triggered）。

epoll可以同时支持水平触发和边缘触发（Edge Triggered，只告诉进程哪些文件描述符刚刚变为就绪状态，它只说一遍，如果我们没有采取行动，
那么它将不会再次告知，这种方式称为边缘触发），理论上边缘触发的性能要更高一些，但是代码实现相当复杂。
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

注意：写事件注册时机。应用层数据已经准备完善，可以向通道中发送时，对SocketChannel进行写事件的注册。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Buffer、状态标识（position，limit，capacity）
写模式：向Buffer中填充/写入数据。
写模式的两种方式：一，put系列的方法。二，使用Channel.read(Buffer)来将Channel中的数据写进Buffer缓冲区中。
状态信息：每写入一单元数据，position递增1。limit与capacity相等，表示最多允许写入多少单位数据进Buffer中。

读模式：从Buffer中提取/读出数据。
读模式的两种方式：一，get系列的方法。二，使用Channel.write(Buffer)来将Buffer缓冲区的数据写入到Channel中。
状态信息：每读出一单元数据，position递增1。limit与capacity一般情况下不等（缓冲区满时相等），limit表示最多还有多少单位数据可以被读出。

flip：Buffer从写模式转换成读模式。只有在读模式下，才可以获取缓冲区的数据，其他状态下不正确。

如果一个方法参数只接受byte[]，而你将ByteBuffer.array()方式返回的字节数组传递给方法，则ByteBuffer内部的状态不会改变。该方式为Buffer不正确使用方式！

--------------------------------------------------------------------------------------------------------------------

Channel ------>  SelectionKey  : channel.keyFor(selector)   Channel通过Selector获得关联的SelectionKey

SelectionKey  --------> Channel :  selectionKey.channel()   SelectionKey获得关联的Channel
SelectionKey  --------> Selector :  selectionKey.selector()   SelectionKey获得注册的Selector


