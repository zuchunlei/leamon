JavaEE规范中与安全相关的名词：
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
用户（User）：允许使用应用程序服务的合法个体。
组（Group）：方便管理用户，可以将多个用户定义在一个组中加以管理。
角色（Role）：Java应用程序许可证管理的依据。
Realm：存储身份验证时所需数据的地方。

其中角色是由应用程序定义的，在web.xml中进行描述。
用户是否可以存取某些资源，所凭借的是用户是否具备某种角色。

将角色对应到用户或组的设置方式，不是JavaEE标准的一部分，不同的应用服务器有不同的设置方式。

注意：用户，组，Realm全是应用服务器提供的概念，而且与应用程序无关。
      角色由应用程序在web.xml中进行定义，并且与资源一起构成安全约束。

用户 --- 角色 --- 资源

用户的信息存放于服务器端，具体存放位置由Realm定义。
资源是由应用程序提供的，与角色一起构成一个安全约束单元。

角色是构成JavaEE安全的关键，用来联系用户与资源。保证用户可以访问有权限访问的资源。

角色由应用程序在web.xml中定义，但是角色与用户/组的设置方式不同的服务器则不同。

对用户的认证方式由应用程序在web.xml中指定。
------------------------------------------------------------------------------------------------------
web.xml中对JavaEE安全的具体配置

	<!-- 指定对用户的认证方式，BASIC采用浏览器默认的认证方式 -->
	<login-config>
		<auth-method>BASIC</auth-method>
	</login-config>

	<!-- 定义角色，其中角色的名称为access -->
	<security-role>
		<role-name>access</role-name>
	</security-role>

	<!-- 通过角色名称与web资源共同构建安全约束单元 -->
	<security-constraint>
		<!-- 通过url-pattern方式声明web资源 -->
		<web-resource-collection>
			<web-resource-name>encode resource</web-resource-name>
			<url-pattern>/encode/*</url-pattern>
		</web-resource-collection>
		<!-- 将指定的角色名称绑定到web资源上 -->
		<auth-constraint>
			<role-name>access</role-name>
		</auth-constraint>
	</security-constraint>

Tomcat服务器对角色与用户的配置，tomcat-user.xml
<tomcat-users>
	<role rolename="access"/>
	<user username="zuchunlei" password="zuchunlei" roles="access"/>
</tomcat-users>
