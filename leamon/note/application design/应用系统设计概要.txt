层次化（纵向），模块化（横向）设计！

设计之道：抽象通用与不变的部分，封装变化的部分。
		 样例1：模板方法模式，将处理流程（不变部分）固化为程序的执行骨架，将各部分的具体实现（变化部分）。---类级别
		 样例2：回调方法模式，将与资源管理等细节无关的处理（变化部分）以回调接口的方式传入，将资源管理的细节（不变部分）封装在方法内部。---方法级别
		 注：回调方法在Spring中从始至终被处处用到，回调方法被用来隐藏复杂的资源管理细节，这些资源即使在发生错误的时候也必须被关闭。
--------------------------------------------------------------------------------------------------------------------------------------------
问：应用程序与应用服务器之间的关系？
答：应用服务器又称为中间件，是位于操作系统和应用程序之间的通用服务。
          它的主要作用是用来屏蔽网络硬件平台的差异性和操作系统与网络协议的异构性， 使应用程序能够比较平滑地运行于不同平台上；
          并且为应用程序提供运行环境以及必需的服务与资源。
          
	应用程序运行在应用服务器环境中，主要处理自身关注的业务逻辑。由应用服务器为其提供运行环境，以及必需的服务与资源来完成业务操作。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
问：JavaEE世界中，哪些属于Java应用程序的所需的服务与资源？
答：以任何形式存在的网络连接，例如：数据库连接，JMS连接，RPC调用的网络连接。
	注：在Servlet中，Http请求对象Request与Http响应对象Response全都是应用服务器提供的资源；
		EJB同样也是应用服务器为应用程序提供的组件服务，EJB组件为应用服务器作为资源进行管理，并以服务方式发布。
		JavaEE世界中，JNDI作为应用服务器提供的服务注册与查找服务，为应用程序获取资源与服务提供了统一全局的访问点。
	
	线程调度，负载均衡，HttpSession管理，安全验证等通用服务。
	
	所有这些，可以统称为应用服务器提供的基础设施！
	
	Java应用与应用服务器之间的关系类比与程序与操作系统的关系；
	操作系统OS为程序提供运行环境（进程结构，内存空间，线程模型，系统调用），为程序运行提供所有的资源。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
问：POJO是什么？他与JavaBean之间的关系与区别？
答：POJO是一个简单的、正规Java对象，它包含业务逻辑处理或持久化逻辑等，但不是JavaBean、EntityBean等，不具有任何特殊角色和不继承或不实现任何其它Java框架的类或接口。
	JavaBean 是一种JAVA语言写成的可重用组件。为写成JavaBean，类必须是具体的和公共的，并且具有无参数的构造器。setter/getter方式暴露属性。
	
	POJO一般是一个普通的Java对象，而JavaBean更多的是与对象设计相关而存在的概念。
	POJO更倾向于对象内部实现细节，而JavaBean更倾向于面向对象的设计与组织。
	
	POJO：实例域与方法，JavaBean：属性与行为。
	
	