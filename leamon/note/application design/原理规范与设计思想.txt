操作系统使用文件对数据进行存储与传输。

机制，原理，规范，协议（技术）
模式，架构，结构，职责（设计）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

接口目的是抽象，抽象类目的是复用。

模块之间的调用，最好采用基础数据类型进行通信（入参列表与返回值），不要将各模块内部数据类型暴露给其它模块。
如果必要的将该模块内部的数据类型暴露给外界，应该暴露的是抽象，而不是具体实现。

事件驱动编程是以事件为第一驱动的编程模型，提到事件，可能有很多容易混淆的概念，这里的事件是指一种异步并发的消息模型，
而普通的观察者模式则没有这个强调，观察者和被观察者之间通讯可以是同步机制。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
组件（component）与服务（service）

所谓“组件”是指这样一个软件单元：它将被应用到一个该组件作者无法知晓的应用程序中，但是该应用程序无法对组件进行修改。
也就是说，使用一个组件的应用程序不能修改组件的源代码，但是可以通过作者预留的某种途径对其进行扩展，以改变组件的行为。

服务和组件有某些相似之处：它们都将被外部的应用程序使用。两者之间最大的差异在于：组件是在本地使用的（例如JAR文件、程序集、DLL、或者源码导入）；
而服务是要通过--同步或者异步--远程接口来远程使用的（例如web service、消息系统、rpc或者socket）。

在软件设计中，往往将内部“组件”暴露（expose）为外部“服务”，供其它应用程序进行使用。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

将配置文件的格式与配置机制分离开；服务的配置应该与使用分离开。（分治原则）
组件内部的配置机制不应该暴露给客户端，应该保证组件的内聚性，并与客户端弱耦合。只通过服务接口与客户端通信。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
模式，固化设计经验。

下层组件不要依赖上层组件而存在，如果上层组件在下层组件对象的构造方法以及成员域中存在，则对下层组件造成了侵入！！（重构心得）
组件内部不要使用其它对象的状态值，而应该使用其它对象的方法获得，无论该对象与组件关系多么亲密（内部类除外）。

组件可以脱离外部依赖独立存在（内聚性），可以独立进行单元测试。提供一组完备的功能接口。
对象不可以直接操作（访问/改变）其它对象的实例域（父类内部实例域虽然子类可见，但是也不要直接操作），只能够通过其它对象暴露的方法接口进行调用来间接操作。
